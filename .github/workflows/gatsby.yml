name: Build & Deploy Gatsby to GitHub Pages

on:
  push:
    branches: ["main"]    # change if your default branch is different
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest

    # Prevents the OpenSSL/webpack crypto error for older Gatsby builds
    env:
      NODE_OPTIONS: --openssl-legacy-provider

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read packageManager from package.json
        id: pm
        run: |
          if [ -f package.json ]; then
            pkg_pm=$(node -e "console.log(require('./package.json').packageManager || '')")
            echo "pm=$pkg_pm" >> $GITHUB_OUTPUT
          else
            echo "pm=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js (use Node 20)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'yarn'

      # If packageManager includes yarn@4.* enable corepack and prepare the exact yarn version
      - name: Enable Corepack & prepare Yarn 4 (if required)
        if: startsWith(steps.pm.outputs.pm, 'yarn@')
        run: |
          # Use corepack to enable Yarn; this ensures the exact yarn version from packageManager is used.
          corepack enable
          # if user pinned yarn@4.9.2+sha... in package.json, corepack prepare will install it
          corepack prepare "${{ steps.pm.outputs.pm#*@ }}" --activate || true
          echo "Corepack enabled. Using: $(yarn --version || true)"

      - name: Ensure Yarn v1 fallback (only if yarn.lock exists but packageManager isn't set)
        if: ${{ !startsWith(steps.pm.outputs.pm, 'yarn@') && -f 'yarn.lock' }}
        run: |
          # If repo has yarn.lock but packageManager isn't yarn@..., install stable yarn v1 to avoid surprises
          npm install -g yarn@1.22.22
          echo "Installed Yarn v1 fallback: $(yarn --version)"

      - name: Print environment summary
        run: |
          echo "Node: $(node -v)"
          echo "npm:  $(npm -v)"
          if command -v yarn >/dev/null 2>&1; then echo "yarn: $(yarn --version)"; fi
          echo "packageManager: '${{ steps.pm.outputs.pm }}'"
          if [ -f yarn.lock ]; then echo "yarn.lock exists"; else echo "no yarn.lock"; fi

      - name: Setup GitHub Pages (configure-pages)
        id: pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: gatsby

      - name: Install dependencies (Yarn v4 / v1 / npm fallback)
        run: |
          set -e
          if [ -f package.json ] && [[ "${{ steps.pm.outputs.pm }}" == yarn@* ]]; then
            # Yarn 4 (berry) path
            if [ -f yarn.lock ]; then
              echo "Yarn v4 + yarn.lock -> immutable install"
              yarn install --immutable --inline-builds
            else
              echo "Yarn v4 + no yarn.lock -> normal install (will create lockfile)"
              yarn install --inline-builds
            fi
          elif [ -f yarn.lock ]; then
            # Repo has yarn.lock but packageManager not set to yarn@ - use yarn v1 for consistency
            echo "Using Yarn v1 (installed earlier) with yarn.lock"
            yarn install --frozen-lockfile --network-concurrency 1 || yarn install --network-concurrency 1
          elif [ -f package-lock.json ]; then
            echo "Using npm ci"
            npm ci
          else
            echo "No lockfile found - using npm install"
            npm install
          fi
        timeout-minutes: 30

      - name: Build site
        run: |
          echo "Building site..."
          # Use the same package manager to run the build script
          if [[ "${{ steps.pm.outputs.pm }}" == yarn@* ]] || [ -f yarn.lock ]; then
            yarn build
          else
            npm run build
          fi
        timeout-minutes: 20

      - name: Upload pages artifact (public)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
